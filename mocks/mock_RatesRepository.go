// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/tomcyr/kryptonim-example/domain"
)

// MockRatesRepository is an autogenerated mock type for the RatesRepository type
type MockRatesRepository struct {
	mock.Mock
}

// GetRates provides a mock function with given fields: ctx, baseCurrency, currencies
func (_m *MockRatesRepository) GetRates(ctx context.Context, baseCurrency *domain.Currency, currencies []*domain.Currency) (map[domain.Currency]float64, error) {
	ret := _m.Called(ctx, baseCurrency, currencies)

	if len(ret) == 0 {
		panic("no return value specified for GetRates")
	}

	var r0 map[domain.Currency]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Currency, []*domain.Currency) (map[domain.Currency]float64, error)); ok {
		return rf(ctx, baseCurrency, currencies)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Currency, []*domain.Currency) map[domain.Currency]float64); ok {
		r0 = rf(ctx, baseCurrency, currencies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[domain.Currency]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Currency, []*domain.Currency) error); ok {
		r1 = rf(ctx, baseCurrency, currencies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRatesRepository creates a new instance of MockRatesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRatesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRatesRepository {
	mock := &MockRatesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
